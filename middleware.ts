import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import { getToken } from "next-auth/jwt";

export async function middleware(req:NextRequest) {
    const token = await getToken({req})
    const isAuth = !!token

    const isAdminPage = req.nextUrl.pathname.startsWith('/admin')
    const isLoginPage = req.nextUrl.pathname === "/login"

    // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login ‡πÅ‡∏ï‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ admin ‚Üí ‡∏™‡πà‡∏á‡πÑ‡∏õ login ‡∏û‡∏£‡πâ‡∏≠‡∏° callback
    if(isAdminPage && !isAuth){
        const loginUrl = new URL('/login', req.url)

        // üëá ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ /admin ‡∏ï‡∏£‡∏á ‡πÜ ‡πÉ‡∏´‡πâ‡∏û‡∏≤‡πÑ‡∏õ /admin/dashboard ‡πÅ‡∏ó‡∏ô‡∏´‡∏•‡∏±‡∏á login
        const targetPath = req.nextUrl.pathname === "/admin"
        ? '/admin/dashboard'
        : req.nextUrl.pathname

        loginUrl.searchParams.set('callbackUrl', targetPath)
        return NextResponse.redirect(loginUrl)
    }

      // login ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ /login ‚Üí ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ /admin
      if(isLoginPage && isAuth){
        return NextResponse.redirect(new URL("/admin", req.url))
      }

    return NextResponse.next()
}

// ‡∏ö‡∏≠‡∏Å Next.js ‡πÉ‡∏´‡πâ middleware ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤ admin
export const config = {
    matcher: ['/admin/:path*', "/login"]
}